package main

import (
	"fmt"
	"os"

	"github.com/tada-team/tdproto/codegen"
)

func main() {
	if err := codegen.Render(os.Stdout, `// Autogenerated. Do not edit.
/**
 * Contact, group or task id
 */
type JID = string;

/**
 * Task tab name
 */
type TaskTabKey = string;

/**
 * Chat type
 */
export const enum ChatType {
   DIRECT = 'direct',
   GROUP = 'group',
   TASK = 'task',
}

/**
 * Contact status in team
 */
export const enum TeamStatus {
   OWNER = 'owner',
   ADMIN = 'admin',
   MEMBER = 'member',
   GUEST = 'guest',
}

/**
 * Contact status in group
 */
export const enum GroupStatus {
   ADMIN = 'admin',
   MEMBER = 'member',
}

/**
 * Message type
 */
export const enum Mediatype {
   PLAIN = 'plain',
   CHANGE = 'change',
   DELETED = 'deleted',
   FILE = 'file',
   IMAGE = 'image',
   VIDEO = 'video',
   AUDIOMSG = 'audiomsg',
   CONTACT = 'contact',
   PDF = 'pdf',
}

/**
 * Message type
 */
export const enum Mediasubtype {
   STICKER = 'sticker',
   NEWTASK = 'newtask',
}

type MessageLinks = MessageLink[];
type TeamUnread = Record<ChatType, Unread>
type TaskFilterKey = string;
type TaskSortKey = string;
type TaskTabKey = string;

{{- range $s := .TadaStructs}}
/**
 * {{$s.Help}}.
 */
export interface {{$s.Name}} { {{- range $f := $s.Fields }}
   /**
    * {{$f.Help}}.{{if $f.Readonly}} Readonly.{{end}}
    */
   {{$f.JSName}}{{ if $f.Omitempty }}?{{end}}:  {{$f.TSType}}{{ if $f.List }}[]{{end}}{{ if $f.Null }} | null{{ end }};
{{end}}
}
{{end}}

const undef = (v: any): boolean => (typeof v === 'undefined')

{{ range $s := .TadaStructs}}
/**
 * Create New{{$s.Name}} from raw json.
 */
export const New{{$s.Name}} = (e: any): {{$s.Name}} => ({  
{{- range $f := $s.Fields }}
    {{$f.JSName}}: {{ if $f.InternalType -}}
	{{- if $f.Omitempty }}undef(e['{{$f.Json}}']) ? {{ if $f.List }}[]{{ else }}{{$f.TSDefault}}{{ end }} : {{ end }}{{ if $f.List }}e['{{$f.Json}}'].map(New{{ $f.TSType }}){{ else }}New{{ $f.TSType }}(e['{{$f.Json}}']){{ end }}
{{- else -}}
	{{- if $f.Omitempty }}undef(e['{{$f.Json}}']) ? {{ if $f.List }}[]{{ else }}{{$f.TSDefault}}{{ end }} : {{ end }}e['{{$f.Json}}'] 
{{- end -}},{{/* {{ if $f.Omitempty }}// omitempty{{ end }} 
	{{- if $f.Null }}// nullable{{ end -}}
	{{- if $f.List }}// list{{ end }}
	 */}}
{{- end }}
})
{{if not $s.Readonly}}
/**
 * Export {{$s.Name}} to json.
 */
export const Export{{$s.Name}} = (e: {{$s.Name}}|null): any => (e === null ? null : {  
{{- range $f := $s.Fields }}{{ if not $f.Readonly }}
	'{{$f.Json}}': {{ if $f.InternalType -}}
		{{- if $f.List -}}
			e.{{$f.JSName}}.map(Export{{$f.TSType}})
		{{- else -}}
			Export{{$f.TSType}}(e.{{$f.JSName}})
		{{- end -}}
	{{- else -}}
		e.{{$f.JSName}}
	{{- end }},
{{- end }}{{- end }}
})
{{end}}{{end}}

`); err != nil {
		fmt.Println(err)
	}
}
